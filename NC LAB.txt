3a.Bit-Stuffing

public class BitStuffing {
   
    public static String bitStuffing(String input) {
        StringBuilder stuffed = new StringBuilder();
        int consecutiveOnes = 0;
        for (char bit : input.toCharArray()) {
            if (bit == '1') {
                consecutiveOnes++;
                stuffed.append('1');
                if (consecutiveOnes == 5) {
                    stuffed.append('0');
                    consecutiveOnes = 0;
                }
            } else {
                consecutiveOnes = 0;
                stuffed.append('0');
            }
        }
        return stuffed.toString();
    } 
    public static void main(String[] args) {
        String originalData = "011111101111110111111";
        System.out.println("Original Data: " + originalData);
        String stuffedData = bitStuffing(originalData);
        System.out.println("Stuffed Data: " + stuffedData);
    }
}

3b.Character-Stuffing

import java.util.*;
class Char
{
public static void main(String r[])
{
Scanner sc=new Scanner(System.in);
System.out.println("Enter number of characters: ");
int n=sc.nextInt();
String in[]=new String[n];
System.out.println("Enter characters: ");
for(int i=0;i<n;i++)
{

in[i]=sc.next();
}
for(int i= 0;i<n;i++)
{
if(in[i].equals("dle"))
{
in[i]="dle dle";
} }
System.out.println("Transmitted message is: ");
System.out.print(" dle stx ");
for(int i=0;i<n;i++)
{
System.out.print(in[i]+" ");
}
System.out.println(" dle etx ");
}
}


4a.Stop and wait

Sender:

import java.io.*;
import java.net.*;
public class Sender{
Socket sender;
ObjectOutputStream out;
ObjectInputStream in;
String packet,ack,str, msg;
int n,i=0,sequence=0;
Sender(){}
public void run(){
try{
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
System.out.println("Waiting for Connection....");
sender = new Socket("localhost",2004);
sequence=0;
out=new ObjectOutputStream(sender.getOutputStream());
out.flush();
in=new ObjectInputStream(sender.getInputStream());
str=(String)in.readObject();
System.out.println("receiver > "+str);
System.out.println("Enter the data to send....");
packet=br.readLine();
n=packet.length();
do{
try{
if(i<n){
msg=String.valueOf(sequence);
msg=msg.concat(packet.substring(i,i+1));
}
else if(i==n){
msg="end";out.writeObject(msg);break;
}
out.writeObject(msg);

sequence=(sequence==0)?1:0;
out.flush();
System.out.println("data sent>"+msg);
ack=(String)in.readObject();
System.out.println("waiting for ack.....\n\n");
if(ack.equals(String.valueOf(sequence))){
i++;
System.out.println("receiver > "+" packet recieved\n\n");
}
else{
System.out.println("Time out resending data....\n\n");
sequence=(sequence==0)?1:0;

}
}catch(Exception e){}
}while(i<n+1);
System.out.println("All data sent. exiting.");
}catch(Exception e){}
finally{
try{
in.close();
out.close();
sender.close();
}
catch(Exception e){}
}
}
public static void main(String args[]){
Sender s=new Sender();
s.run();
}
}

Receiver:

import java.io.*;
import java.net.*;
public class Receiver {
ServerSocket receiver;
Socket connection = null;
ObjectOutputStream out;
ObjectInputStream in;
String packet, ack, data = "";
int i = 0, sequence = 0;
public Receiver() {
}
public void run() {
try {
BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
receiver = new ServerSocket(2004, 10);
System.out.println("waiting for connection...");
connection = receiver.accept();
sequence = 0;
System.out.println("Connection established:");
out = new ObjectOutputStream(connection.getOutputStream());
out.flush();
in = new ObjectInputStream(connection.getInputStream());
out.writeObject("connected.");
do {
try {
packet = (String) in.readObject();
if (Integer.valueOf(packet.substring(0, 1)) == sequence) {

data += packet.substring(1);
sequence = (sequence == 0) ? 1 : 0;
System.out.println("\n\nreceiver >" + packet);
} else {
System.out.println("\n\nreceiver>" + packet + " duplicate data");
}
if (i < 3) {
out.writeObject(String.valueOf(sequence));
i++;
} else {
out.writeObject(String.valueOf((sequence + 1) % 2));
i = 0;
}
} catch (Exception e) {
}
} while (!packet.equals("end"));
System.out.println("Data received=" + data);
out.writeObject("connection ended.");
} catch (Exception e) {
} finally {
try {
in.close();
out.close();
receiver.close();
} catch (Exception e) {
}
}
}
public static void main(String args[]) {
Receiver s = new Receiver();
while (true) {
s.run();
}
}
}


4b.Sliding-window

Sender:

import java.net.*;
import java.io.*;
public class slidsender {
public static void main(String a[]) throws Exception {
ServerSocket ser = new ServerSocket(10);
Socket s = ser.accept();
BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
BufferedReader in1 = new BufferedReader(new InputStreamReader(s.getInputStream()));
String sbuff[] = new String[8];
PrintStream p;
int sptr = 0, sws = 8, nf, ano, i;
String ch;
do {
p = new PrintStream(s.getOutputStream());
System.out.print("Enter the no. of frames : ");
nf = Integer.parseInt(in.readLine());
p.println(nf);
if (nf <= sws - 1) {
System.out.println("Enter " + nf + " Messages to be send\n");
for (i = 1; i <= nf; i++) {
sbuff[sptr] = in.readLine();
p.println(sbuff[sptr]);
sptr = ++sptr % 8;
}
sws -= nf;
System.out.print("Acknowledgment received");
ano = Integer.parseInt(in1.readLine());
System.out.println(" for " + ano + " frames");
sws += nf;
} else {
System.out.println("The no. of frames exceeds window size");
break; }

System.out.print("\nDo you want to send some more frames : ");
ch = in.readLine();
p.println(ch);
} while (ch.equals("yes"));
s.close();
} }

Receiver:

import java.net.*;
import java.io.*;
class slidreceiver {
public static void main(String a[]) throws Exception {
Socket s = new Socket(InetAddress.getLocalHost(), 10);
BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream()));
PrintStream p = new PrintStream(s.getOutputStream());
int i = 0, rptr = -1, nf, rws = 8;
String rbuf[] = new String[8];
String ch;
System.out.println();
do {
nf = Integer.parseInt(in.readLine());
if (nf <= rws - 1) {
for (i = 1; i <= nf; i++) {
rptr = ++rptr % 8;
rbuf[rptr] = in.readLine();
System.out.println("The received Frame " + rptr + " is : " + rbuf[rptr]);
} rws -= nf;
System.out.println("\nAcknowledgment sent\n");
p.println(rptr + 1);
rws += nf;
} else
break;
ch = in.readLine();
} while (ch.equals("yes"));
} }



5a.Ping

Client Side:

import java.io.*;
import java.net.*;
import java.util.*;

class client {
    public static void main(String[] args) throws Exception {
        String str;
        int c = 0;
        long t1, t2;
        Socket s = new Socket("localhost", 5555);
        DataInputStream dis = new DataInputStream(s.getInputStream());
        PrintStream out = new PrintStream(s.getOutputStream());
        while (c < 4) {
            t1 = System.currentTimeMillis();
            str = "Welcome to networks";
            out.println(str);
            System.out.println(dis.readLine());
            t2 = System.currentTimeMillis();
            System.out.println("TLL : " + (t2 - t1) + "ms");
            c++;
        }
        s.close();
    }
}

Server Side:

import java.io.*;
import java.net.*;

class server {
    public static void main(String[] args) throws Exception {
        ServerSocket ss = new ServerSocket(5555);
        Socket s = ss.accept();
        int c = 0;

        while (c < 4) {
            DataInputStream dis = new DataInputStream(s.getInputStream());
            PrintStream out = new PrintStream(s.getOutputStream());
            String str = dis.readLine();
            out.println("Reply from " + InetAddress.getLocalHost() + " Length " + str.length());
            c++;
        }

        s.close();
        ss.close();
    }
}


5b.Trace Route

import java.io.*;
import java.net.*;
class Traceroute
{
    public static void main(String args[])
    {
        try
        {
            String str;
            System.out.print(" Enter the IP Address to be Traced : ");
            BufferedReader buf1=new BufferedReader(new InputStreamReader(System.in));
            String ip=buf1.readLine();
            Runtime H=Runtime.getRuntime();
            Process p=H.exec("traceroute " + ip);
            InputStream in=p.getInputStream();
            BufferedReader buf2=new BufferedReader(new InputStreamReader(in));
            while((str=buf2.readLine())!=null)
            {
                System.out.println(" " + str);
            }
        } catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
}

7.TCP/UDP

Sender:

import java.io.*;
import java.net.*;
import java.util.Scanner;

public class Sender {
    public static void main(String[] args) throws IOException {
        Scanner s = new Scanner(System.in);
        Socket socket = new Socket("localhost", 5555);
        System.out.print("Enter message to send: ");
        String str = s.nextLine();
        PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
        out.println(str);
        socket.close();
        s.close();
    }
}


Receiver:

import java.io.*;
import java.net.*;

public class Receiver {
    public static void main(String[] args) throws IOException {
        ServerSocket serverSocket = new ServerSocket(5555);
        System.out.println("Server is running and waiting for a connection...");
        Socket socket = serverSocket.accept();
        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        String message = in.readLine();
        System.out.println("Received: " + message);
        socket.close();
        serverSocket.close();
    }
}


8.Socket for HTTP


Client

import java.io.*;
import java.net.*;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;

public class Client {
public static void main(String args[]) throws Exception {
Socket soc;
BufferedImage img = null;
soc = new Socket("localhost", 4000);
System.out.println("Client is running.");
try {
System.out.println("Reading image from disk.");
img = ImageIO.read(new File("C:\\Users\\Kavya\\Downloads\\helll.jpeg"));
ByteArrayOutputStream baos = new ByteArrayOutputStream();
ImageIO.write(img, "jpg", baos);
baos.flush();
byte[] bytes = baos.toByteArray();
baos.close();
System.out.println("Sending image to server.");
OutputStream out = soc.getOutputStream();

DataOutputStream dos = new DataOutputStream(out);
dos.writeInt(bytes.length);
dos.write(bytes, 0, bytes.length);
System.out.println("Image sent to server.");
InputStream in = soc.getInputStream();
BufferedReader br = new BufferedReader(new InputStreamReader(in));
String response = br.readLine();
System.out.println("Server response: " + response);
dos.close();
out.close();
} catch (IOException e) {
e.printStackTrace();
} finally {
soc.close();
}
}
}

Server

import java.io.*;
import java.net.*;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import javax.swing.*;

public class Server {
public static void main(String args[]) throws Exception {
ServerSocket server = null;
Socket socket;
server = new ServerSocket(4000);
System.out.println("Server Waiting for image");
while (true) {

socket = server.accept();
System.out.println("Client connected.");
InputStream in = socket.getInputStream();
DataInputStream dis = new DataInputStream(in);
int len = dis.readInt();
System.out.println("Image Size: " + len / 1024 + "KB");
byte[] data = new byte[len];
dis.readFully(data);
ByteArrayInputStream ian = new ByteArrayInputStream(data);
BufferedImage bImage = ImageIO.read(ian);
JFrame f = new JFrame("Server");
ImageIcon icon = new ImageIcon(bImage);
JLabel label = new JLabel(icon);
f.add(label);
f.pack();
f.setVisible(true);
OutputStream out = socket.getOutputStream();
PrintWriter pw = new PrintWriter(out, true);
pw.println("Image received successfully.");
out.close();
dis.close();
in.close();
socket.close();
}
}
}



9.Subnet

import java.util.Scanner;
class subnet{
public static void main(String args[]){
Scanner sc = new Scanner(System.in);
System.out.print("Ip address: ");
String ip = sc.nextLine();
String split_ip[] = ip.split("\\."); 
String split_bip[] = new String[4]; 
String bip = "";
for(int i=0;i<4;i++){
split_bip[i] = appendZeros(Integer.toBinaryString(Integer.parseInt(split_ip[i])));
bip += split_bip[i];
}
System.out.println("Binary Format "+bip);
System.out.print("Enter the number of addresses in each subnet: ");
int n = sc.nextInt();
int bits = (int)Math.ceil(Math.log(n)/Math.log(2));
int mask = 32-bits;
System.out.println("Subnet mask = "+mask);
int fbip[] = new int[32];
for(int i=0; i<32;i++) fbip[i] = (int)bip.charAt(i)-48; 
for(int i=31;i>31-bits;i--)
fbip[i] &= 0;
String fip[] = {"","","",""};
for(int i=0;i<32;i++)
fip[i/8] = new String(fip[i/8]+fbip[i]);
System.out.print("Network address is = ");
for(int i=0;i<4;i++){

System.out.print(Integer.parseInt(fip[i],2));
if(i!=3) System.out.print(".");
}
System.out.println();
int lbip[] = new int[32];
for(int i=0; i<32;i++) lbip[i] = (int)bip.charAt(i)-48; 
for(int i=31;i>31-bits;i--)
lbip[i] |= 1;
String lip[] = {"","","",""};
for(int i=0;i<32;i++)
lip[i/8] = new String(lip[i/8]+lbip[i]);
System.out.print("Broadcast address is = ");
for(int i=0;i<4;i++){
System.out.print(Integer.parseInt(lip[i],2));
if(i!=3) System.out.print(".");
}
System.out.println();
}
static String appendZeros(String s){
String temp = new String("00000000");
return temp.substring(s.length())+ s;
}
}
